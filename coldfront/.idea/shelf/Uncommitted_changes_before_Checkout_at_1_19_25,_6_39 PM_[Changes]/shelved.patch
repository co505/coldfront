Index: core/project/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import datetime\nimport textwrap\nfrom enum import Enum\n\nfrom django.contrib.auth.models import User\nfrom django.core.exceptions import ValidationError\nfrom django.core.validators import MinLengthValidator\nfrom django.db import models\nfrom ast import literal_eval\nfrom coldfront.core.utils.validate import AttributeValidator\nfrom model_utils.models import TimeStampedModel\nfrom simple_history.models import HistoricalRecords\n\nfrom coldfront.core.field_of_science.models import FieldOfScience\nfrom coldfront.core.utils.common import import_from_settings\n\nPROJECT_ENABLE_PROJECT_REVIEW = import_from_settings('PROJECT_ENABLE_PROJECT_REVIEW', False)\nPROJECT_CODE = import_from_settings('PROJECT_CODE', False)\nPROJECT_CODE_PADDING = import_from_settings('PROJECT_CODE_PADDING', False)\n\n\nclass ProjectPermission(Enum):\n    \"\"\" A project permission stores the user, manager, pi, and update fields of a project. \"\"\"\n\n    USER = 'user'\n    MANAGER = 'manager'\n    PI = 'pi'\n    UPDATE = 'update'\n\nclass ProjectStatusChoice(TimeStampedModel):\n    \"\"\" A project status choice indicates the status of the project. Examples include Active, Archived, and New. \n    \n    Attributes:\n        name (str): name of project status choice\n    \"\"\"\n    class Meta:\n        ordering = ('name',)\n\n    class ProjectStatusChoiceManager(models.Manager):\n        def get_by_natural_key(self, name):\n            return self.get(name=name)\n\n    name = models.CharField(max_length=64, unique=True)\n    objects = ProjectStatusChoiceManager()\n\n    def __str__(self):\n        return self.name\n\n    def natural_key(self):\n        return (self.name,)\n\nclass Project(TimeStampedModel):\n    \"\"\" A project is a container that includes users, allocations, publications, grants, and other research output. \n    \n    Attributes:\n        title (str): name of the project\n        pi (User): represents the User object of the project's PI\n        description (str): description of the project\n        field_of_science (FieldOfScience): represents the field of science for this project\n        status (ProjectStatusChoice): represents the ProjectStatusChoice of this project\n        force_review (bool): indicates whether or not to force a review for the project\n        requires_review (bool): indicates whether or not the project requires review\n    \"\"\"\n    class Meta:\n        ordering = ['title']\n        unique_together = ('title', 'pi')\n\n        permissions = (\n            (\"can_view_all_projects\", \"Can view all projects\"),\n            (\"can_review_pending_project_reviews\", \"Can review pending project reviews\"),\n        )\n\n    class ProjectManager(models.Manager):\n        def get_by_natural_key(self, title, pi_username):\n            return self.get(title=title, pi__username=pi_username)\n\n\n    DEFAULT_DESCRIPTION = '''\nWe do not have information about your research. Please provide a detailed description of your work and update your field of science. Thank you!\n        '''\n\n    title = models.CharField(max_length=255,)\n    pi = models.ForeignKey(User, on_delete=models.CASCADE,)\n    description = models.TextField(\n        default=DEFAULT_DESCRIPTION,\n        validators=[\n            MinLengthValidator(\n                10,\n                'The project description must be > 10 characters.',\n            )\n        ],\n    )\n\n\n    field_of_science = models.ForeignKey(FieldOfScience, on_delete=models.CASCADE, default=FieldOfScience.DEFAULT_PK)\n    status = models.ForeignKey(ProjectStatusChoice, on_delete=models.CASCADE)\n    force_review = models.BooleanField(default=False)\n    requires_review = models.BooleanField(default=True)\n    history = HistoricalRecords()\n    objects = ProjectManager()\n    project_id = models.CharField(max_length=20, blank=True, null=True)\n\n\n    def clean(self):\n        \"\"\" Validates the project and raises errors if the project is invalid. \"\"\"\n\n        if 'Auto-Import Project'.lower() in self.title.lower():\n            raise ValidationError('You must update the project title. You cannot have \"Auto-Import Project\" in the title.')\n\n        if 'We do not have information about your research. Please provide a detailed description of your work and update your field of science. Thank you!' in self.description:\n            raise ValidationError('You must update the project description.')\n\n\n\n    @property\n    def last_project_review(self):\n        \"\"\"\n        Returns:\n            ProjectReview: the last project review that was created for this project\n        \"\"\"\n\n        if self.projectreview_set.exists():\n            return self.projectreview_set.order_by('-created')[0]\n        else:\n            return None\n\n    @property\n    def latest_grant(self):\n        \"\"\"\n        Returns:\n            Grant: the most recent grant for this project, or None if there are no grants\n        \"\"\"\n\n        if self.grant_set.exists():\n            return self.grant_set.order_by('-modified')[0]\n        else:\n            return None\n\n    @property\n    def latest_publication(self):\n        \"\"\"\n        Returns:\n            Publication: the most recent publication for this project, or None if there are no publications\n        \"\"\"\n\n        if self.publication_set.exists():\n            return self.publication_set.order_by('-created')[0]\n        else:\n            return None\n\n    @property\n    def needs_review(self):\n        \"\"\"\n        Returns:\n            bool: whether or not the project needs review\n        \"\"\"\n\n        if self.status.name == 'Archived':\n            return False\n\n        now = datetime.datetime.now(datetime.timezone.utc)\n\n        if self.force_review is True:\n            return True\n\n        if not PROJECT_ENABLE_PROJECT_REVIEW:\n            return False\n\n        if self.requires_review is False:\n            return False\n\n        if self.projectreview_set.exists():\n            last_review = self.projectreview_set.order_by('-created')[0]\n            last_review_over_365_days = (now - last_review.created).days > 365\n        else:\n            last_review = None\n\n        days_since_creation = (now - self.created).days\n\n        if days_since_creation > 365 and last_review is None:\n            return True\n\n        if last_review and last_review_over_365_days:\n            return True\n\n        return False\n\n    @property\n    def create_project_code(self):\n        \"\"\"\n        Returns:\n            PROJECT_CODE: the project code associated with this project, if this environment variable is defined\n            PROJECT_CODE_PADDING: Number of leading zeros before the project code, if this environment variable is defined\n        \"\"\"\n\n        if self.pk and PROJECT_CODE_PADDING:\n            return f\"{PROJECT_CODE}{str(self.pk).zfill(PROJECT_CODE_PADDING)}\"\n\n        if self.pk:\n            return f\"{PROJECT_CODE}{self.pk}\"\n\n        return None\n\n\n    def user_permissions(self, user):\n        \"\"\"\n        Params:\n            user (User): represents the user whose permissions are to be retrieved\n\n        Returns:\n            list[ProjectPermission]: a list of the user's permissions for the project\n        \"\"\"\n\n        if user.is_superuser:\n            return list(ProjectPermission)\n\n        user_conditions = (models.Q(status__name__in=('Active', 'New')) & models.Q(user=user))\n        if not self.projectuser_set.filter(user_conditions).exists():\n            return []\n\n        permissions = [ProjectPermission.USER]\n\n        if self.projectuser_set.filter(user_conditions & models.Q(role__name='Manager')).exists():\n            permissions.append(ProjectPermission.MANAGER)\n\n        if self.projectuser_set.filter(user_conditions & models.Q(project__pi_id=user.id)).exists():\n            permissions.append(ProjectPermission.PI)\n\n        if ProjectPermission.MANAGER in permissions or ProjectPermission.MANAGER in permissions:\n            permissions.append(ProjectPermission.UPDATE)\n\n        return permissions\n\n    def has_perm(self, user, perm):\n        \"\"\"\n        Params:\n            user (User): user to check permissions for\n            perm (ProjectPermission): permission to check for in user's list\n\n        Returns:\n            bool: whether or not the user has the specified permission\n        \"\"\"\n\n        perms = self.user_permissions(user)\n        return perm in perms\n\n\n    def __str__(self):\n        return self.title\n\n    def natural_key(self):\n        return (self.title,) + self.pi.natural_key()\n\n    def save(self, *args, **kwargs):\n        if PROJECT_CODE:\n            self.project_id = self.create_project_code\n\n        return super().save(*args, **kwargs)\n\n\nclass ProjectAdminComment(TimeStampedModel):\n    \"\"\" A project admin comment is a comment that an admin can make on a project. \n    \n    Attributes:\n        project (Project): links the project the comment is from to the comment\n        author (User): represents the admin who authored the comment\n        comment (str): text input from the project admin containing the comment\n    \"\"\"\n\n    project = models.ForeignKey(Project, on_delete=models.CASCADE)\n    author = models.ForeignKey(User, on_delete=models.CASCADE)\n    comment = models.TextField()\n\n    def __str__(self):\n        return self.comment\n\nclass ProjectUserMessage(TimeStampedModel):\n    \"\"\" A project user message is a message sent to a user in a project. \n    \n    Attributes:\n        project (Project): links the project the message is from to the message\n        author (User): represents the user who authored the message\n        is_private (bool): indicates whether or not the message is private\n        message (str): text input from the user containing the message\n    \"\"\"\n\n    project = models.ForeignKey(Project, on_delete=models.CASCADE)\n    author = models.ForeignKey(User, on_delete=models.CASCADE)\n    is_private = models.BooleanField(default=True)\n    message = models.TextField()\n\n    def __str__(self):\n        return self.message\n\nclass ProjectReviewStatusChoice(TimeStampedModel):\n    \"\"\" A project review status choice is an option a user can choose when setting a project's status. Examples include Completed and Pending.\n    \n    Attributes:\n        name (str): name of the status choice\n    \"\"\"\n\n    name = models.CharField(max_length=64)\n\n    def __str__(self):\n        return self.name\n\n    class Meta:\n        ordering = ['name', ]\n\nclass ProjectReview(TimeStampedModel):\n    \"\"\" A project review is what a user submits to their PI when their project status is Pending. \n    \n    Attributes:\n        project (Project): links the project to its review\n        status (ProjectReviewStatusChoice): links the project review to its status\n        reason_for_not_updating_project (str): text input from the user indicating why the project was not updated\n    \"\"\"\n\n    project = models.ForeignKey(Project, on_delete=models.CASCADE)\n    status = models.ForeignKey(ProjectReviewStatusChoice, on_delete=models.CASCADE, verbose_name='Status')\n    reason_for_not_updating_project = models.TextField(blank=True, null=True)\n    history = HistoricalRecords()\n\nclass ProjectUserRoleChoice(TimeStampedModel):\n    \"\"\" A project user role choice is an option a PI, manager, or admin has while selecting a user's role. Examples include Manager and User.\n    \n    Attributes:\n        name (str): name of the user role choice  \n    \"\"\"\n\n    class Meta:\n        ordering = ['name', ]\n\n    class ProjectUserRoleChoiceManager(models.Manager):\n        def get_by_natural_key(self, name):\n            return self.get(name=name)\n\n    name = models.CharField(max_length=64, unique=True)\n    objects = ProjectUserRoleChoiceManager()\n\n    def __str__(self):\n        return self.name\n\n    def natural_key(self):\n        return (self.name,)\n\nclass ProjectUserStatusChoice(TimeStampedModel):\n    \"\"\" A project user status choice indicates the status of a project user. Examples include Active, Pending, and Denied.\n    \n    Attributes:\n        name (str): name of the project user status choice\n    \"\"\"\n    class Meta:\n        ordering = ['name', ]\n\n    class ProjectUserStatusChoiceManager(models.Manager):\n        def get_by_natural_key(self, name):\n            return self.get(name=name)\n\n    name = models.CharField(max_length=64, unique=True)\n    objects = ProjectUserStatusChoiceManager()\n\n    def __str__(self):\n        return self.name\n\n    def natural_key(self):\n        return (self.name,)\n\nclass ProjectUser(TimeStampedModel):\n    \"\"\" A project user represents a user on the project.\n    \n    Attributes:\n        user (User): represents the User object of the project user\n        project (Project): links user to its project\n        role (ProjectUserRoleChoice): links the project user role choice to the user\n        status (ProjectUserStatusChoice): links the project user status choice to the user\n        enable_notifications (bool): indicates whether or not the user should enable notifications\n    \"\"\"\n\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    project = models.ForeignKey(Project, on_delete=models.CASCADE)\n    role = models.ForeignKey(ProjectUserRoleChoice, on_delete=models.CASCADE)\n    status = models.ForeignKey(ProjectUserStatusChoice, on_delete=models.CASCADE, verbose_name='Status')\n    enable_notifications = models.BooleanField(default=True)\n    history = HistoricalRecords()\n\n    def __str__(self):\n        return '%s %s (%s)' % (self.user.first_name, self.user.last_name, self.user.username)\n\n    class Meta:\n        unique_together = ('user', 'project')\n        verbose_name_plural = \"Project User Status\"\n\nclass AttributeType(TimeStampedModel):\n    \"\"\" An attribute type indicates the data type of the attribute. Examples include Date, Float, Int, Text, and Yes/No. \n    \n    Attributes:\n        name (str): name of attribute data type\n    \"\"\"\n    \n    name = models.CharField(max_length=64)\n\n    def __str__(self):\n        return self.name\n\n    class Meta:\n        ordering = ['name', ]\n\nclass ProjectAttributeType(TimeStampedModel):\n    \"\"\" A project attribute type indicates the type of the attribute. Examples include Project ID and Account Number. \n    \n    Attributes:\n        attribute_type (AttributeType): indicates the data type of the attribute\n        name (str): name of project attribute type\n        has_usage (bool): indicates whether or not the attribute type has usage\n        is_required (bool): indicates whether or not the attribute is required\n        is_unique (bool): indicates whether or not the value is unique\n        is_private (bool): indicates whether or not the attribute type is private\n        is_changeable (bool): indicates whether or not the attribute type is changeable\n    \"\"\"\n\n    attribute_type = models.ForeignKey(AttributeType, on_delete=models.CASCADE)\n    name = models.CharField(max_length=50)\n    has_usage = models.BooleanField(default=False)\n    is_required = models.BooleanField(default=False)\n    is_unique = models.BooleanField(default=False)\n    is_private = models.BooleanField(default=True)\n    is_changeable = models.BooleanField(default=False)\n    history = HistoricalRecords()\n\n    def __str__(self):\n        return '%s (%s)' % (self.name, self.attribute_type.name)\n\n    def __repr__(self) -> str:\n        return str(self)\n\n    class Meta:\n        ordering = ['name', ]\n\nclass ProjectAttribute(TimeStampedModel):\n    \"\"\" A project attribute class links a project attribute type and a project. \n    \n    Attributes:\n        proj_attr_type (ProjectAttributeType): project attribute type to link\n        project (Project): project to link\n        value (str): value of the project attribute\n    \"\"\"\n\n    proj_attr_type = models.ForeignKey(ProjectAttributeType, on_delete=models.CASCADE)\n    project = models.ForeignKey(Project, on_delete=models.CASCADE)\n\n    value = models.CharField(max_length=128)\n    history = HistoricalRecords()\n\n    def save(self, *args, **kwargs):\n        \"\"\" Saves the project attribute. \"\"\"\n        super().save(*args, **kwargs)\n        if self.proj_attr_type.has_usage and not ProjectAttributeUsage.objects.filter(project_attribute=self).exists():\n            ProjectAttributeUsage.objects.create(\n                project_attribute=self)\n\n    def clean(self):\n        \"\"\" Validates the project and raises errors if the project is invalid. \"\"\"\n        if self.proj_attr_type.is_unique and self.project.projectattribute_set.filter(proj_attr_type=self.proj_attr_type).exists():\n            raise ValidationError(\"'{}' attribute already exists for this project.\".format(\n                self.proj_attr_type))\n\n        expected_value_type = self.proj_attr_type.attribute_type.name.strip()\n\n        validator = AttributeValidator(self.value)\n\n        if expected_value_type == \"Int\":\n            validator.validate_int()\n        elif expected_value_type == \"Float\":\n            validator.validate_float()\n        elif expected_value_type == \"Yes/No\":\n            validator.validate_yes_no()\n        elif expected_value_type == \"Date\":\n            validator.validate_date()\n\n    def __str__(self):\n        return '%s' % (self.proj_attr_type.name)\n\nclass ProjectAttributeUsage(TimeStampedModel):\n    \"\"\" Project attribute usage indicates the usage of a project attribute. \n    \n    Attributes:\n        project_attribute (ProjectAttribute): links the usage to its project attribute\n        value (float): usage value of the project attribute\n    \"\"\"\n\n    project_attribute = models.OneToOneField(\n        ProjectAttribute, on_delete=models.CASCADE, primary_key=True)\n    value = models.FloatField(default=0)\n    history = HistoricalRecords()\n\n    def __str__(self):\n        return '{}: {}'.format(self.project_attribute.proj_attr_type.name, self.value)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/project/models.py b/core/project/models.py
--- a/core/project/models.py	(revision f0c0f66590d6aef39af5a239ee9c29581aeae303)
+++ b/core/project/models.py	(date 1737311870739)
@@ -15,9 +15,7 @@
 from coldfront.core.utils.common import import_from_settings
 
 PROJECT_ENABLE_PROJECT_REVIEW = import_from_settings('PROJECT_ENABLE_PROJECT_REVIEW', False)
-PROJECT_CODE = import_from_settings('PROJECT_CODE', False)
-PROJECT_CODE_PADDING = import_from_settings('PROJECT_CODE_PADDING', False)
-
+INSTITUTION_CODE = import_from_settings('INSTITUTION_CODE', False)
 
 class ProjectPermission(Enum):
     """ A project permission stores the user, manager, pi, and update fields of a project. """
@@ -98,8 +96,6 @@
     requires_review = models.BooleanField(default=True)
     history = HistoricalRecords()
     objects = ProjectManager()
-    project_id = models.CharField(max_length=20, blank=True, null=True)
-
 
     def clean(self):
         """ Validates the project and raises errors if the project is invalid. """
@@ -185,23 +181,6 @@
 
         return False
 
-    @property
-    def create_project_code(self):
-        """
-        Returns:
-            PROJECT_CODE: the project code associated with this project, if this environment variable is defined
-            PROJECT_CODE_PADDING: Number of leading zeros before the project code, if this environment variable is defined
-        """
-
-        if self.pk and PROJECT_CODE_PADDING:
-            return f"{PROJECT_CODE}{str(self.pk).zfill(PROJECT_CODE_PADDING)}"
-
-        if self.pk:
-            return f"{PROJECT_CODE}{self.pk}"
-
-        return None
-
-
     def user_permissions(self, user):
         """
         Params:
@@ -251,11 +230,6 @@
     def natural_key(self):
         return (self.title,) + self.pi.natural_key()
 
-    def save(self, *args, **kwargs):
-        if PROJECT_CODE:
-            self.project_id = self.create_project_code
-
-        return super().save(*args, **kwargs)
 
 
 class ProjectAdminComment(TimeStampedModel):
@@ -495,4 +469,23 @@
     history = HistoricalRecords()
 
     def __str__(self):
-        return '{}: {}'.format(self.project_attribute.proj_attr_type.name, self.value)
+        return '{}: {}'.format(self.project_attribute.proj_attr_type.name, self.value) 
+
+
+
+class ProjectCode(TimeStampedModel):
+    """ Project Code represents a user definied project identifier, built upon project primary key
+    
+    Attributes:
+        project (Project):  link to project primary key
+        project_code (float): user defined environment variable combined with project field
+
+    """    
+
+    project = models.OneToOneField(Project, on_delete=models.CASCADE)
+    project_code = models.CharField(max_length=10, blank=True, null=True)
+    
+    def __str__(self):
+        return '%s' % (self.project_code)
+
+
